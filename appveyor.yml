
configuration:
    - Release
    - Debug

# common configuration
for:

# override for tag push
-
  branches:
    only:
      - master
  
  configuration:
    - Release
    - Debug
    - Appx

# Do not package appx on pull requests
- 
  branches:
    only:
      - /pr*/

  configuration:
    - Release
    - Debug



# Operating system (build VM template)
os:
  - Visual Studio 2017
  #- Visual Studio 2015
  #- Visual Studio 2013


platform:
  - x86
  - x64

artifacts:

  # old style packaging
  - path: output/Dependencies_*.zip
    name: Dependencies

  # "centennial" style packaging
  - path: "bin/**/*.appx"
  - path: "DependenciesAppx/DependenciesAppx_TemporaryKey.cer"

deploy:
  # Deploy to GitHub Releases
  - provider: GitHub
    artifact: Dependencies
    draft: false
    prerelease: false
    on:
      appveyor_repo_tag: true       # deploy on tag push only

cache:
  - packages -> **\packages.config

build:
  project: C:/projects/dependencies/Dependencies.sln

environment:
  git_tag: "git tag -l --points-at HEAD" # return the tag associated with the current commit
  certsecret:
    secure: 1id6kDyNieDfYWTAnoJ/hA==

before_build:
  - ps: |
      if ($env:git_tag)
      {
        # extracting signing cert
        &nuget install secure-file -ExcludeVersion;
        &secure-file/tools/secure-file -decrypt "C:/projects/dependencies/DependenciesAppx/DependenciesAppx_TemporaryKey.pfx.enc" -secret "$($env:certsecret)" -out "C:/projects/dependencies/DependenciesAppx/DependenciesAppx_TemporaryKey.pfx";
      }

      # download all the necessary packages
      nuget restore 

after_test:
 - ps: |
    if ($env:git_tag)
    {
      # remove decoded cert as soon as it is not useful anymore
      Remove-Item -Force "C:/projects/dependencies/DependenciesAppx/DependenciesAppx_TemporaryKey.pfx"
    }
      

test_script: # should be on_finish, but it need to be executed before artifacts is
  - ps: |
      
      # Download external dependencies like peview
      Push-Location;
      $PEVIEW_BIN="";
      New-Item -ItemType Directory -Force -Path "tmp";
      cd tmp;
      wget https://github.com/processhacker2/processhacker2/releases/download/v2.39/processhacker-2.39-bin.zip -OutFile processhacker-2.39-bin.zip;
      $PhArchiveHash = (Get-FileHash -Algorithm SHA256 -Path ./processhacker-2.39-bin.zip).Hash;
      if ($PhArchiveHash -eq "2afb5303e191dde688c5626c3ee545e32e52f09da3b35b20f5e0d29a418432f5") {
        &7z.exe x ./processhacker-2.39-bin.zip $($env:platform)/peview.exe
        $PEVIEW_BIN = (Resolve-Path ./$($env:platform)/peview.exe).Path;
      }
      Pop-Location;

      # Bundling dbghelp.dll along for undecorating names
      $DbgHelpDll="";
      if (Test-Path "$env:SystemRoot\System32\dbghelp.dll") {
        $DbgHelpDll=(Resolve-Path $env:SystemRoot\System32\dbghelp.dll).Path;
      }

      # Creating output directory
      New-Item -ItemType Directory -Force -Path "output";
      cd output;

      $BINPATH="C:/projects/dependencies/bin/$($env:CONFIGURATION)$($env:platform)";

      Write-Host "Test if the binary (and the underlying lib) actually works"
      &"$BINPATH/Dependencies.exe" -knowndll
      &"$BINPATH/Dependencies.exe" -apisets
      &"$BINPATH/Dependencies.exe" -manifest "$($env:windir)/System32/shell32.dll" 
      &"$BINPATH/Dependencies.exe" -sxsentries "$($env:windir)/System32/ctfmon.exe" 

      # &"$BINPATH/demangler-test.exe"

      Write-Host "Zipping everything"
      &7z.exe a Dependencies_$($env:platform)_$($env:CONFIGURATION).zip $BINPATH/*.dll $BINPATH/*.exe $BINPATH/*.config $BINPATH/*.pdb $PEVIEW_BIN $DbgHelpDll;
      &7z.exe a "Dependencies_$($env:platform)_$($env:CONFIGURATION)_(without peview.exe).zip" $BINPATH/*.dll $BINPATH/*.exe $BINPATH/*.config $BINPATH/*.pdb $DbgHelpDll;

      # APPX packaging
      if (( $($env:CONFIGURATION) -eq "Release") -and ($env:git_tag)) {
        $makeappx = "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\makeappx.exe";
        $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\signtool.exe";

        # Copy assets to build folder
        Copy-Item "C:/projects/dependencies/DependenciesAppx/Assets" -Destination "C:/projects/dependencies/bin/Appx_$($env:CONFIGURATION)$($env:platform)" -Force -Recurse

        # Create appx package
        & $makeappx pack /d "C:/projects/dependencies/bin/Appx_$($env:CONFIGURATION)$($env:platform)" /l /p "C:/projects/dependencies/bin/Appx_$($env:CONFIGURATION)$($env:platform).appx"

        # Sign appx package
        & $signtool sign /fd SHA256 /a /f "C:/projects/dependencies/DependenciesAppx/DependenciesAppx_TemporaryKey.pfx" "C:/projects/dependencies/bin/Appx_$($env:CONFIGURATION)$($env:platform).appx"
      }
    
  - ps: Write-Host "Building artifact done"